(define-state-type state_type (
  (c1_b1 Bool)
  (c1_b2 Bool)
  (c1_b3 Bool)
  (c2_b1 Bool)
  (c2_b2 Bool)
  (c2_b3 Bool)
  (fcm_timeout1 Real)
  (fcm_timeout2 Real)
  (fcm_timeout3 Real)
  (mvs1 Real)
  (mvs2 Real)
  (mvs_timeout1 Real)
  (mvs_timeout2 Real)
  ;; We need integers here
  (period_counter Int)
  (pre_y1 Real)
  (pre_y3 Real)
  (time Real)
  (x Real)
  (y1 Real)
  (y2 Real)
  (y3 Real))
)

(define-states definitions state_type
  (let ((cs!77 (* period_counter 2)))
  (let ((t!9 (- time cs!77)))
    (and
      (= c1_b1 true)
      (= c1_b3 true)
      (= c2_b1 true)
      (= c2_b3 true)
      (and 
        (<= cs!77 time) 
        (< time (* (+ period_counter 1) 2))
      )
      (= x (cond ((or (< t!9 0) (not (<= t!9 2))) 0) ((<= t!9 1) t!9)
            (else (- 1 (- t!9 1))))))
  ))
)

(define-states initial_states state_type
  (and
    (and (<= 0 fcm_timeout1) (< fcm_timeout1 (/ 1 5)))
    (= y1 0)
    (= pre_y1 0)
    (and (<= 0 fcm_timeout2) (< fcm_timeout2 (/ 1 5)))
    (and (<= 0 fcm_timeout3) (< fcm_timeout3 (/ 1 5)))
    (= y3 0)
    (= pre_y3 0)
    (and (<= 0 mvs_timeout1) (< mvs_timeout1 (/1 20)))
    (= mvs1 0)
    (and (<= 0 mvs_timeout2) (< mvs_timeout2 (/1 20)))
    (= mvs2 0)
    (= time 0)
  )
)

(define-transition transition state_type
        (let ((cs!54 (not c1_b2'))
              (cs!56 (+ time (/1 20)))
              (cs!58 (not c2_b2'))
              (cs!60 (= pre_y1' pre_y1))
              (cs!61 (= y1' y1))
              (cs!62 (= fcm_timeout1' fcm_timeout1))
              (cs!63 (= y2' y2))
              (cs!64 (= fcm_timeout2' fcm_timeout2))
              (cs!65 (= pre_y3' pre_y3))
              (cs!66 (= y3' y3))
              (cs!67 (= fcm_timeout3' fcm_timeout3))
              (cs!68 (= mvs1' mvs1))
              (cs!69 (= mvs_timeout1' mvs_timeout1))
              (cs!70 (= mvs2' mvs2))
              (cs!71 (= mvs_timeout2' mvs_timeout2))
              (cs!72 (+ time (/ 1 5))))
          (let ((y2!3 (ite c1_b2' y2' mvs1))
                (y2!4 (ite c2_b2' y2' mvs2)))
            (let ((cs!73 (<= y1' y3'))
                  (cs!74 (<= y2!3 y3'))
                  (cs!75 (<= y1' y3'))
                  (cs!76 (<= y2!4 y3')))
              (or
                (and
                  (or
                    (and
                      (= time fcm_timeout1)
                      (= fcm_timeout1' cs!72)
                      (= y1' x')
                      (= pre_y1' y1))
                    (and (/= time fcm_timeout1) cs!60 cs!62 cs!61))
                  (or
                    (and
                      (= time fcm_timeout2)
                      (<= (+ time (/ 1 1000)) fcm_timeout2')
                      true)
                    (and (/= time fcm_timeout2) cs!64 cs!63))
                  (or
                    (and
                      (= time fcm_timeout3)
                      (= fcm_timeout3' cs!72)
                      (= y3' x')
                      (= pre_y3' y3))
                    (and (/= time fcm_timeout3) cs!65 cs!67 cs!66))
                  (or
                    (and
                      (= time mvs_timeout1)
                      (= mvs_timeout1' cs!56)
                      (=
                        mvs1'
                        (cond
                          ((<= y1' y2!3) (cond (cs!74 y2!3) (cs!73 y3') (else y1')))
                          (cs!73 y1')
                          (cs!74 y3')
                          (else y2!3))))
                    (and (/= time mvs_timeout1) cs!68 cs!69))
                  (or
                    (and
                      (= time mvs_timeout2)
                      (= mvs_timeout2' cs!56)
                      (=
                        mvs2'
                        (cond
                          ((<= y1' y2!4) (cond (cs!76 y2!4) (cs!75 y3') (else y1')))
                          (cs!75 y1')
                          (cs!76 y3')
                          (else y2!4))))
                    (and (/= time mvs_timeout2) cs!70 cs!71))
                  (= time' time))
                (and
                  (< time fcm_timeout1)
                  (< time fcm_timeout2)
                  (< time fcm_timeout3)
                  (< time mvs_timeout1)
                  (< time mvs_timeout2)
                  (and
                    (<= time' fcm_timeout1)
                    (<= time' fcm_timeout2)
                    (<= time' fcm_timeout3)
                    (<= time' mvs_timeout1)
                    (<= time' mvs_timeout2)
                    (or
                      (= time' fcm_timeout1)
                      (= time' fcm_timeout2)
                      (= time' fcm_timeout3)
                      (= time' mvs_timeout1)
                      (= time' mvs_timeout2)))
                  cs!60
                  cs!61
                  cs!62
                  cs!63
                  cs!64
                  cs!65
                  cs!66
                  cs!67
                  cs!68
                  cs!69
                  cs!70
                  cs!71)))))
)

(define-transition-system T state_type initial_states transition)

(assume T
  definitions
)

(query T (and (<= (- mvs1 mvs2) (/ 1 4)) (<= (- mvs2 mvs1) (/ 1 4))))

