;; Define state variables (s) and input (x)
;; s is an array variable of intended size 2 so it should be only indexed by 0 or 1
(define-state-type vars ((s (Array Int Bool)) (x_ Bool)
                         (i Int) (mark Int) (length Int))
                        ((x Bool))
)

;; Initial state
(define-states I vars
  (and (not (select s 0)) (not (select s 1)) (= i 0) (= mark 0) (= length 0) (= x_ false))
)

;; Increment i
(define-transition inc_i vars
  (= next.i (+ state.i 1)))
;; Remember the last x
(define-transition copy_last_x vars
  (= next.x_ input.x))

(define-transition transitions vars
 (let ((b (and (not state.x_) input.x)) (e (and state.x_ (not input.x))))
 (and inc_i copy_last_x
  (or 
;; IDLE -> IDLE
  (and (not (select state.s 0)) (not (select state.s 1))
       (not b)
       (= next.s (store (store state.s 0 false) 1 false)))
       (= next.mark state.mark)
       (= next.length state.length)
;; IDLE -> RISE
  (and (and (not (select state.s 0)) (not (select state.s 1)))
       b
       (= next.s (store (store state.s 1 true) 0 false))
       (= next.mark state.i)
       (= next.length state.length)
  )
;; RISE -> IDLE
  (and (and (not (select state.s 0)) (select state.s 1))
       e
       (= next.s (store (store state.s 1 false) 0 false))       
       (= next.mark 0)
       (= next.length state.length)
  )
;; RISE -> RUN
  (and (and (not (select state.s 0)) (select state.s 1))
       (not e)
       (= next.s (store (store state.s 1 true) 0 true))              
       (= next.mark state.mark)
       (= next.length state.length)
  )
;; RUN -> RUN
  (and (and (select state.s 0) (select state.s 1))
       (not e)
       (= next.s (store (store state.s 1 true) 0 true))           
       (= next.mark state.mark)
       (= next.length state.length)
  )
;; RUN -> IDLE
  (and (and (select state.s 0) (select state.s 1))
       e
       (= next.s (store (store state.s 1 false) 0 false))                  
       (= next.mark state.mark)
       (= next.length (- state.i state.mark))
  )
 )
)
)
)

;; Transistion system
(define-transition-system T vars I transitions)

;; property queries
;;(query T (=> (select s 1) (>= i 1))) ;; this is expected to be unknown 
(query T (=> (select s 1) (>= i 2))) ;; this is expected to be invalid
;;(query T (< length 5))     ;; this is expected to be invalid
